#!/bin/bash

## Copyright (C) 2012 - 2018 ENCRYPTED SUPPORT LP <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

sanitize_variable() {
   local input
   input="$@"

   sanitize_variable_output="$(/usr/lib/msgcollector/striphtml "$input")"
   sanitize_variable_output="$@"

   actual_string_length="${#sanitize_variable_output}"

   if [ "$actual_string_length" -gt "$max_string_length" ]; then
      ## Shorten excess length $sanitize_variable_output to $max_string_length chars.
      sanitize_variable_output="${sanitize_variable_output:0:$max_string_length}"
   fi
}

check_tor_socks_or_trans_port() {
   if [ ! "$leak_tests" = "true" ]; then
      local MSG="\
<p>$FUNCNAME $1: Skipped, because not using <code>--leak-tests</code> (<code>--show-ip</code>), ok.</p>"
      if [ "$verbose" -ge "1" ]; then
         $output_x ${output_opts[@]} --messagex --typex "info" --message "$MSG"
         $output_cli ${output_opts[@]} --messagecli --typecli "info" --message "$MSG"
      fi
      return 0
   fi

   ## debugging hints
   #CURL=echo
   #TEMP_DIR=/home/user

   if [ "$silent" -ge "3" ]; then
      true "silent is $silent. Skipping FUNCNAME $1."
      return 0
   fi

   ## Do not test for stream isolation if Tor detection failed.
   ## This variable may be set to 1, during the first run of this function.
   if [ "$NOT_USING_TOR" = "1" ]; then
      local MSG="<p><b>$test_name: Not testing Tor's <code>TransPort</code>, because Tor could not be detected previously.</b></p>"
      $output_cli ${output_opts[@]} --messagecli --typecli "info" --message "$MSG"
      return 0
   fi

   local LINK="https://check.torproject.org/api/ip"
   local SOCKS_PORT_WHONIXCHECK="9110"
   local check_result_curl_exit_code="0"

   if [ "$1" = "SocksPort" ]; then
      local test_name="<code>SocksPort</code> IP Leak Test"
      local checking_msg="$test_name: Testing Tor's <code>SocksPort</code>..."
      local CURL_PROXY_WHONIXCHECK="--proxy socks5h://user:password@$GATEWAY_IP:$SOCKS_PORT_WHONIXCHECK"
      local CHECK_TOR_OUT_FILE="check_tpo_tor_socksport.html"
      if [ "$qubes_vm_type" = "TemplateVM" ]; then
         local type=info
         local connection_failed_msg="\
<p><code>SocksPort</code> Test Result: Ok, Tor's <code>SocksPort</code> was not reachable.
<br></br>This is expected in default configuration of TemplateVMs in Qubes R4.0 and above, see <a href=https://www.whonix.org/wiki/Dev/Qubes#Network_in_TemplateVMs>https://www.whonix.org/wiki/Dev/Qubes#Network_in_TemplateVMs</a>.</p>"
      elif [ "$VM" = "Whonix-Gateway" ] || [ "$VM" = "Whonix-Workstation" ]; then
         local connection_failed_msg="\
<p>$test_name Result: <a href=https://check.torproject.org/api/ip>https://check.torproject.org/api/ip</a> was not reachable.
<br></br>You could check, if you can reach <a href=https://check.torproject.org/api/ip>https://check.torproject.org/api/ip</a> via the Tor Browser Bundle.</p>"
      else
         local connection_failed_msg="$FUNCNAME: <p>This is neither Whonix-Gateway nor Whonix-Workstation. Please report this bug to the Whonix developers!</p>"
      fi
   elif [ "$1" = "UpdatesProxy" ]; then
      local test_name="<code>UpdatesProxy</code> IP Leak Test"
      local checking_msg="$test_name: Testing Qubes' <code>UpdatesProxy</code>..."

      source /usr/lib/qubes-whonix/utility_functions.sh
      local CURL_PROXY_WHONIXCHECK="--proxy $PROXY_SERVER"

      local CHECK_TOR_OUT_FILE="check_tpo_tor_transport.html"
      local connection_failed_msg="\
<p><code>UpdatesProxy</code> IP Leak Test: Qubes' <code>UpdatesProxy</code> was not reachable.</p>"
   elif [ "$1" = "TransPort" ]; then
      local test_name="<code>TransPort</code> IP Leak Test"
      local checking_msg="$test_name: Testing Tor's <code>TransPort</code>..."
      local CURL_PROXY_WHONIXCHECK=""
      local CHECK_TOR_OUT_FILE="check_updates_proxy.html"

      if [ "$qubes_vm_type" = "TemplateVM" ]; then
         local type=info
         local connection_failed_msg="\
<p><code>TransPort</code> Test Result: Ok, Tor's <code>TransPort</code> was not reachable.
<br></br>This is expected in default configuration of TemplateVMs in Qubes R4.0 and above, see <a href=https://www.whonix.org/wiki/Dev/Qubes#Network_in_TemplateVMs>https://www.whonix.org/wiki/Dev/Qubes#Network_in_TemplateVMs</a>.</p>"
      elif [ "$VM" = "Whonix-Gateway" ]; then
         local type=info
         local connection_failed_msg="\
<p><code>TransPort</code> Test Result: Ok, Tor's <code>TransPort</code> was not reachable.
<br></br>This is expected on Whonix-Gateway's default configuration.</p>"
      else
         local type=error
         local connection_failed_msg="\
<p><code>TransPort</code> Test Result: Tor's <code>TransPort</code> was not reachable.
<br></br>It is normal for this error to temporarily occur.</p>"
      fi
   else
      local MSG="<p><code>TransPort</code>/<code>SocksPort</code>/<code>UpdatesProxy</code> Test Error: <b>\$1 is neither TransPort nor <code>SocksPort</code> nor <code>UpdatesProxy</code>.</b> Please report this bug to the Whonix developers!</p>"
      $output_x ${output_opts[@]} --messagex --typex "error" --message "$MSG"
      $output_cli ${output_opts[@]} --messagecli --typecli "error" --message "$MSG"
      return 0
   fi

   local MSG="$checking_msg"
   $output_cli ${output_opts[@]} --messagecli --typecli "info" --message "$MSG"

   $CURL \
      --fail \
      $CURL_VERBOSE \
      $CURL_PROXY_WHONIXCHECK \
      --tlsv1.2 \
      --proto =https \
      --max-time 180 \
      $CURL_TPO_PIN_CERT \
      --output "$TEMP_DIR/$CHECK_TOR_OUT_FILE" \
      "$LINK" \
      &

   lastpid="$!"
   wait "$lastpid" || { check_result_curl_exit_code="$?" ; true; };

   if [ ! "$check_result_curl_exit_code" = "0" ]; then
      local curl_status_message
      curl_status_message="$(/usr/lib/curl-scripts/curl_exit_codes "$check_result_curl_exit_code")"

      local MSG="$connection_failed_msg
(curl exit code: $curl_status_message)</p>"
      if [ "$type" = "" ]; then
         type=error
      fi
      $output_x ${output_opts[@]} --messagex --typex "$type" --message "$MSG"
      $output_cli ${output_opts[@]} --messagecli --typecli "$type" --message "$MSG"
      return 0
   fi

   local bug_maybe_msg
   bug_maybe_msg="Could be a Whonix bug, check.torproject.org change, bug or compromise. Please report this bug to the Whonix developers!"

   ## grep exit codes:
   ## 0 found
   ## 1 otherwise
   ## 2 if an error occurred

   local tor_detected check_tor_out_file_content
   tor_detected="Unknown"

   check_tor_out_file_content="$(cat $TEMP_DIR/$CHECK_TOR_OUT_FILE)"
   ## read by sanitize_variable
   ## An IPv6 IP is 39 characters long. Add a few for more for the "[ ]" and...?
   max_string_length="50"
   ## sets:
   ## actual_string_length
   ## max_string_length
   ## sanitize_variable_output
   sanitize_variable "$check_tor_out_file_content"
   check_tor_out_file_content="$sanitize_variable_output"

   if [ "$verbose" -ge "2" ]; then
      local MSG="\
<p>$FUNCNAME $1: <code>check_tor_out_file_content:</code>
<blockquote>$check_tor_out_file_content</blockquote></p>"
      $output_x ${output_opts[@]} --messagex --typex "info" --message "$MSG"
      $output_cli ${output_opts[@]} --messagecli --typecli "info" --message "$MSG"
   fi

   tor_detected="$(echo "$check_tor_out_file_content" | python3 -c "import sys, json; print(json.load(sys.stdin)['IsTor'])")" || { tor_detected="$?" ; true; };

   ## read by sanitize_variable
   ## An IPv6 IP is 39 characters long. Add a few for more for the "[ ]" and...?
   max_string_length="50"
   ## sets:
   ## actual_string_length
   ## max_string_length
   ## sanitize_variable_output
   sanitize_variable "$tor_detected"
   tor_detected="$sanitize_variable_output"

   ## example tor_detected:
   # True
   ## example tor_detected:
   # False
   ## example output of python3 in case of an error:
   #Traceback (most recent call last):
   #  File "<string>", line 1, in <module>
   #KeyError: 'name'

   if [ ! "$tor_detected" = "False" ]; then
      if [ ! "$tor_detected" = "True" ]; then
         ## an error occurred
         local MSG="<p>$test_name Result: tor_detected is neither True nor False. $bug_maybe_msg</p>"
         $output_x ${output_opts[@]} --messagex --typex "error" --message "$MSG"
         $output_cli ${output_opts[@]} --messagecli --typecli "error" --message "$MSG"
         return 0
      fi
   fi

   local json_ip_exit_code ip
   json_ip_exit_code="0"
   ip="$(echo "$check_tor_out_file_content" | python3 -c "import sys, json; print(json.load(sys.stdin)['IP'])")" || { json_ip_exit_code="$?" ; true; };

   ## example ip:
   ## 94.242.204.74

   if [ ! "$json_ip_exit_code" = "0" ]; then
      ## an error occurred
      local MSG="<p>$test_name Result: <b>json_ip_exit_code: $json_ip_exit_code.</b> $bug_maybe_msg</p>"
      $output_x ${output_opts[@]} --messagex --typex "error" --message "$MSG"
      $output_cli ${output_opts[@]} --messagecli --typecli "error" --message "$MSG"
      return 0
   fi

   ## Test excessive string length.
   #ip="Your IP address appears to be: <b>2001:0db8:85a3:0042:1000:8a2e:0370:7334 \$f(do) \`this\` ... xxx ... xxx </b><br>"

   ## sets:
   ## actual_string_length
   ## max_string_length
   ## sanitize_variable_output
   sanitize_variable "$ip"
   ip="$sanitize_variable_output"

   if [ "$actual_string_length" -gt "$max_string_length" ]; then
      local MSG="<p><b>$1 Test: Excessive string length of IP variable</b> (<code>$actual_string_length</code> characters).</p>"
      $output_x ${output_opts[@]} --messagex --typex "warning" --message "$MSG"
      $output_cli ${output_opts[@]} --messagecli --typecli "warning" --message "$MSG"
      return 0
   fi

   ## Store IP for later use in memory.
   if [ "$1" = "SocksPort" ]; then
      IP_SOCKS_PORT="$ip"
   elif [ "$1" = "UpdatesProxy" ]; then
      IP_UPDATES_PROXY="$ip"
   elif [ "$1" = "TransPort" ]; then
      IP_TRANS_PORT="$ip"
   fi

   local ip_show_maybe_text
   if [ "$show_ip" = "true" ]; then
      ip_show_maybe_text="IP: <code>$ip</code>"
   else
      ip_show_maybe_text=""
   fi

   ## Check if connected to Tor or not,
   ## and choose which message to show.
   if [ "$tor_detected" = "True" ]; then
      ## Tor detected.

      if [ "$1" = "SocksPort" ]; then
         CHECK_TOR_RESULT_SOCKS_PORT="$tor_detected"
      elif [ "$1" = "UpdatesProxy" ]; then
         CHECK_TOR_RESULT_UPDATES_PROXY="$tor_detected"
      elif [ "$1" = "TransPort" ]; then
         CHECK_TOR_RESULT_TRANS_PORT="$tor_detected"
      fi

      local MSG="<p>$test_name: Connected to Tor. $ip_show_maybe_text</p>"
      if [ "$silent" -le "0" ]; then
         $output_x ${output_opts[@]} --messagex --typex "info" --message "$MSG"
         $output_cli ${output_opts[@]} --messagecli --typecli "info" --message "$MSG"
      fi
      return 0
   fi

   ## Tor not detected.
   NOT_USING_TOR="1"

   exornator_msg="You could try to find out if this IP is/was a Tor exit node using a search engine or ExoneraTor:
<br></br><a href=https://metrics.torproject.org/exonerator.html>https://metrics.torproject.org/exonerator.html</a>"

   local not_using_msg_tor="\
<p>$test_name Result:
<br></br><b>Looks like you are not connected through Tor!</b>
<br></br>$ip_show_maybe_text</p>

<p>Whonixcheck aborted!</p>

<p>Possible reasons:
<br></br>- There could be something wrong.
<br></br>- It's a false positive. <a href=https://check.torproject.org/api/ip>https://check.torproject.org/api/ip</a> fails in some cases to detect exit nodes.</p>"

   if [ "$1" = "SocksPort" ]; then
      local not_using_msg_tor="$not_using_msg_tor"
   elif [ "$1" = "UpdatesProxy" ]; then
      local not_using_msg_tor="$not_using_msg_tor"
   elif [ "$1" = "TransPort" ]; then
      local not_using_msg_tor="$not_using_msg_tor

<p>Other in this case common reasons:
<br></br>- You added a VPN.
<br></br>- You added a transproxy.</p>"
   fi

   not_using_msg_tor="$not_using_msg_tor

<p>$exornator_msg</p>"

   local MSG="$not_using_msg_tor"

   $output_x ${output_opts[@]} --messagex --typex "error" --message "$MSG"
   $output_cli ${output_opts[@]} --messagecli --typecli "error" --message "$MSG"
   EXIT_CODE="1"
   cleanup "1"
   return 0
}

check_qubes_updates_proxy() {
   if [ ! "$qubes_detected" = "true" ]; then
      return 0
   fi

   ## Abort for any Qubes VM type other than TemplateVM, because
   ## sys-whonix can reach non-torified Qubes UpdatesProxy
   ## https://github.com/QubesOS/qubes-issues/issues/3201
   if [ ! "$qubes_vm_type" = "TemplateVM" ]; then
      return 0
   fi

   check_tor_socks_or_trans_port "UpdatesProxy"
}

check_tor_socks_port() {
   check_tor_socks_or_trans_port "SocksPort"
}

check_tor_trans_port() {
   check_tor_socks_or_trans_port "TransPort"
}
