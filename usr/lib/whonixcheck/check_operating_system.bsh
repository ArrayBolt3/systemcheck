#!/bin/bash

## Copyright (C) 2012 - 2018 Patrick Schleizer <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

check_operating_system() {
   if [ "$silent" -ge "3" ]; then
      true "silent is $silent. Skipping $FUNCNAME."
      return 0
   fi

   local update_documentation_link_x="<a href=https://www.whonix.org/wiki/Update>Debian Package Update</a>"
   local update_documentation_link_cli="( Documentation: https://www.whonix.org/wiki/Update )"
   ## Running apt-get update as user (non-root).
   ## Depends on exception set in /etc/sudoers.d/.
   ## Minimal custom script.
   local MSG="Debian Package Update Check: Checking for software updates via apt-get... $update_documentation_link_cli"
   $output_cli ${output_opts[@]} --messagecli --typecli "info" --message "$MSG"
   local apt_get_exit_code
   apt_get_exit_code="0"
   ## /usr/lib/security-misc/apt-get-update is timeout protected.
   sudo --non-interactive "/usr/lib/security-misc/apt-get-update" >/dev/null &
   apt_get_update_pid="$!"
   wait "$apt_get_update_pid" || { apt_get_exit_code="$?" ; true; };
   unset apt_get_update_pid

   if [ "$qubes_detected" = "true" ]; then
      if [ "$qubes_vm_persistence" = "full" ]; then
         ## Running in either StandaloneVM or TemplateVM.
         local qubes_update_help="<br></br>1. Open a terminal. ($persistent_changes_start_menu_instructions_first_part Terminal)
<br></br>2. Update. <blockquote><code>sudo apt-get update && sudo apt-get dist-upgrade</code></blockquote>"
      else
         ## TemplateBasedVM
         local qubes_update_help="<br></br>1. Open a TemplateVM terminal. ($persistent_changes_start_menu_instructions_first_part Terminal)
<br></br>2. Update. <blockquote><code>sudo apt-get update && sudo apt-get dist-upgrade</code></blockquote>
3. Shutdown your TemplateVM. (dom0 -> Qubes VM Manager -> right click '<code>$qubes_base_template</code>' -> Shutdown VM)
<br></br>4. Shutdown and restart this TemplateBased <code>$qubes_vm_type</code>. (dom0 -> Qubes VM Manager -> right click '<code>$qubes_name_of_vm</code>' -> Shutdown VM)"
      fi
   fi

   ## `timeout` returns:
   ## - 124 if sigterm was sufficient
   ## - 137 if needed to use kill.

   local debugging_information
   if [ "$apt_get_exit_code" = "124" ] || [ "$apt_get_exit_code" = "137" ]; then
      debugging_information="(Timeout reached.) (apt-get code: $apt_get_exit_code)"
   else
      debugging_information="(apt-get code: $apt_get_exit_code)"
   fi

   if [ ! "$apt_get_exit_code" = "0" ]; then
      if [ "$qubes_detected" = "true" ]; then
         local MSG="<p>$update_documentation_link_x Check Result: <b>Could not check for software updates!</b> $debugging_information
<br></br><u><b>Please manually check inside $update_where.</u></b>
$qubes_update_help</p>"
      else
         local MSG="<p>$update_documentation_link_x Check Result: <b>Could not check for software updates!</b> $debugging_information
<br></br>Please manually check:
<br></br>(Open a terminal, $start_menu_instructions_system_first_part Terminal.)
<code><blockquote>sudo apt-get update && sudo apt-get dist-upgrade</blockquote></code></p>"
      fi
      $output_x ${output_opts[@]} --messagex --typex "warning" --message "$MSG"
      $output_cli ${output_opts[@]} --messagecli --typecli "warning" --message "$MSG"
      return 0
   fi

   local check_os_output
   ## /usr/lib/anon-shared-helper-scripts/apt-get-update-simulate is timeout protected.
   check_os_output="$(/usr/lib/anon-shared-helper-scripts/apt-get-update-simulate 2>&1)"

   local number_upgraded line first_char

   ## Can not simply use
   ## number_upgraded="$(echo "$check_os_output" | grep -Po "^\d+ (?=upgraded)")"
   ## because it would break for non-English languages.

   OIFS="$IFS"
   IFS='
'

   for line in $check_os_output; do
      IFS="$OIFS"
      true "line: $line"
      first_char="${line:0:1}"
      if [[ "$first_char" = "" ]]; then
         continue
      fi
      if [[ "$first_char" != *[!0-9]* ]]; then
         true "'$first_char' is strictly numeric."
         read -r number_upgraded _ <<< "$line"
         true "number_upgraded: $number_upgraded"
         break
      fi
   done

   IFS="$OIFS"

   ## Example number_upgraded:
   ## 55

   if [ "$number_upgraded" = "0" ]; then
      local MSG="<p>$update_documentation_link_x Check Result: No updates found via apt-get.</p>"
      if [ "$silent" -ge "2" ]; then
         true "silent is $silent. Skipping output."
         return 0
      fi
      $output_x ${output_opts[@]} --messagex --typex "info" --message "$MSG"
      $output_cli ${output_opts[@]} --messagecli --typecli "info" --message "$MSG"
      return 0
   fi

   if [ "$qubes_detected" = "true" ]; then
      local MSG="<p>$update_documentation_link_x Check Result: <b>apt-get reports that packages can be updated.</b>
<br></br><b><u>Please update $update_where.</u></b>
$qubes_update_help</p>"
   else
      local MSG="<p>$update_documentation_link_x Check Result: <b>apt-get reports that packages can be updated.</b>
<br></br>Please update Whonix-Gateway and Whonix-Workstation:
<br></br>(Open a terminal, $start_menu_instructions_system_first_part Terminal.)
<code><blockquote>sudo apt-get update && sudo apt-get dist-upgrade</blockquote></code></p>"
   fi

   $output_x ${output_opts[@]} --messagex --typex "warning" --message "$MSG"
   $output_cli ${output_opts[@]} --messagecli --typecli "warning" --message "$MSG"
}
