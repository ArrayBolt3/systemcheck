#!/bin/bash

## Copyright (C) 2012 - 2023 ENCRYPTED SUPPORT LP <adrelanos@whonix.org>
## See the file COPYING for copying conditions.

check_qubes_network_interface() {
   if test -f /run/qubes/this-is-templatevm ; then
      return 0
   fi

   local qubesdb_read_qubes_ip_exit_code
   qubesdb_read_qubes_ip_exit_code="0"
   qubes_ip="$(qubesdb-read /qubes-ip 2>&1)" || { qubesdb_read_qubes_ip_exit_code="$?" ; true; };

   if [ "$qubes_ip" = "Failed connect to local daemon" ]; then
      local if_you_know_what_you_are_doing_msg
      if_you_know_what_you_are_doing_msg="$(if_you_know_what_you_are_doing_funct "$FUNCNAME")"
      local MSG="\
<p>Qubes qubes-db test Result: qubes-db read failed!
<br></br>
<br></br>Reading qubes-db failed to for some reason. This could be due to a broken upgrade, race-condition or other bug. Try restarting the VM to see if this error persists.
<br></br>
<br></br><code>qubesdb-read /qubes-ip</code> output:
<br></br><code>$qubes_ip</code>
<br></br>
<br></br>Check the systemd unit status of qubes-db.
<br></br>1. Open a terminal. ($start_menu_instructions_system_first_part Terminal)
<br></br>2. Run. <blockquote><code>sudo systemctl status qubes-db</code></blockquote>
$if_you_know_what_you_are_doing_msg</p>"
      $output_x ${output_opts[@]} --messagex --typex "error" --message "$MSG"
      $output_cli ${output_opts[@]} --messagecli --typecli "error" --message "$MSG"
      EXIT_CODE="1"
      cleanup "1"
      return 0
   else
      local MSG="<p>Qubes qubes-db Test Result: Connection to local qubes-db daemon succeeded, ok.</p>"
      if [ "$verbose" -ge "1" ]; then
         $output_x ${output_opts[@]} --messagex --typex "info" --message "$MSG"
         $output_cli ${output_opts[@]} --messagecli --typecli "info" --message "$MSG"
      fi
   fi

   if [ "$GATEWAY_IP" = "qubesdb_read_failed" ] || [ ! "$qubesdb_read_qubes_ip_exit_code" = "0" ] ; then
      local netvm_to_what
      if [ "$vm_lower_case_short" = "gateway" ]; then
         netvm_to_what="<code>sys-firewall</code>"
      else
         netvm_to_what="<code>sys-whonix</code>"
      fi
      local if_you_know_what_you_are_doing_msg
      if_you_know_what_you_are_doing_msg="$(if_you_know_what_you_are_doing_funct "$FUNCNAME")"
      local MSG="\
<p>Qubes Settings Test Result: Networking will probably not work. Is the netvm of this VM set to <code>none</code>?
<br></br>Usually you want to set the netvm of this VM to $netvm_to_what.
<blockquote>1. Shutdown this VM.
<br></br>2. dom0 -> Qubes VM Manager -> right click '<code>$qubes_name_of_vm</code>' -> VM Settings -> NetVM
<br></br>3. Restart this VM.</blockquote>
Also refer to the installation instructions of Qubes-Whonix.
<br></br>(Debugging information:)
<br></br>(GATEWAY_IP: <code>$GATEWAY_IP</code>)
<br></br>(qubes_ip: <code>$qubes_ip</code>)
<br></br>(qubes_vm_type: <code>$qubes_vm_type</code>)
<br></br>
<br></br>$if_you_know_what_you_are_doing_msg</p>"
      $output_x ${output_opts[@]} --messagex --typex "warning" --message "$MSG"
      $output_cli ${output_opts[@]} --messagecli --typecli "warning" --message "$MSG"
      EXIT_CODE="1"
      cleanup "1"
      return 0
   else
      local MSG="<p>Qubes Settings Test Result: Ok. (GATEWAY_IP: <code>$GATEWAY_IP</code>)</p>"
      if [ "$verbose" -ge "1" ]; then
         $output_x ${output_opts[@]} --messagex --typex "info" --message "$MSG"
         $output_cli ${output_opts[@]} --messagecli --typecli "info" --message "$MSG"
      fi
   fi
}

check_qubes_vm_type() {
   if [ "$vm_lower_case_short" = "gateway" ]; then
      if [ -f /run/qubes/this-is-netvm ] || [ -f /run/qubes/this-is-proxyvm ] || [ -f /run/qubes/this-is-templatevm ] ; then
         local MSG="<p>Qubes Settings Test Result: Ok, qubes_vm_type is <code>$qubes_vm_type</code>.</p>"
         if [ "$verbose" -ge "1" ]; then
            $output_x ${output_opts[@]} --messagex --typex "info" --message "$MSG"
            $output_cli ${output_opts[@]} --messagecli --typecli "info" --message "$MSG"
         fi
      else
         local if_you_know_what_you_are_doing_msg
         if_you_know_what_you_are_doing_msg="$(if_you_know_what_you_are_doing_funct "$FUNCNAME")"
         local MSG="\
<p>Qubes Settings Test Result: Qubes-Whonix-Gateway Qubes VM Type is <code>$qubes_vm_type</code>, but NetVM, ProxyVM or TemplateVM is expected.
<br></br>You most likely want to re-create this VM. Make sure to choose ProxyVM.
<br></br>Also refer to the installation instructions of Qubes-Whonix.</p>
<br></br>
<br></br>$if_you_know_what_you_are_doing_msg</p>"
         $output_x ${output_opts[@]} --messagex --typex "warning" --message "$MSG"
         $output_cli ${output_opts[@]} --messagecli --typecli "warning" --message "$MSG"
         EXIT_CODE="1"
         cleanup "1"
         return 0
      fi
   fi

   if [ "$vm_lower_case_short" = "workstation" ]; then
      if [ -f /run/qubes/this-is-appvm ] || [ -f /run/qubes/this-is-templatevm ] ; then
         local MSG="<p>Qubes Settings Test Result: Ok, qubes_vm_type is <code>$qubes_vm_type</code>.</p>"
         if [ "$verbose" -ge "1" ]; then
            $output_x ${output_opts[@]} --messagex --typex "info" --message "$MSG"
            $output_cli ${output_opts[@]} --messagecli --typecli "info" --message "$MSG"
         fi
      else
         local if_you_know_what_you_are_doing_msg
         if_you_know_what_you_are_doing_msg="$(if_you_know_what_you_are_doing_funct "$FUNCNAME")"
         local MSG="\
<p>Qubes Settings Test Result: Qubes-Whonix-Workstation Qubes VM Type is <code>$qubes_vm_type</code>, but AppVM or TemplateVM is expected.
<br></br>You most likely want to re-create this VM. Make sure to choose AppVM.
<br></br>Also refer to the installation instructions of Qubes-Whonix.</p>
<br></br>
<br></br>$if_you_know_what_you_are_doing_msg</p>"
         $output_x ${output_opts[@]} --messagex --typex "warning" --message "$MSG"
         $output_cli ${output_opts[@]} --messagecli --typecli "warning" --message "$MSG"
         EXIT_CODE="1"
         cleanup "1"
         return 0
      fi
   fi
}

check_qubes_settings() {
   if [ ! "$qubes_detected" = "true" ]; then
      local MSG="<p>Qubes Settings Test Result: Skipped, because Qubes not detected.</p>"
      if [ "$verbose" -ge "1" ]; then
         $output_x ${output_opts[@]} --messagex --typex "info" --message "$MSG"
         $output_cli ${output_opts[@]} --messagecli --typecli "info" --message "$MSG"
      fi
      return 0
   fi

   systemcheck_run_function check_qubes_network_interface
   systemcheck_run_function check_qubes_vm_type
}

check_qubes_update_proxy_reachability() {
   local MSG="<p>Qubes Update Proxy Reachability Test: Trying to reach Qubes update proxy... PROXY_SERVER: $PROXY_SERVER</p>"
   $output_cli ${output_opts[@]} --messagecli --typecli "info" --message "$MSG"

   #qubes_update_proxy_ip="10.137.255.254"

   local curl_exit_code
   curl_exit_code="0"

   ## Do not use --fail, otherwise curl will return exit code 22 and skip tinyproxy output.
   UWT_DEV_PASSTHROUGH="1" \
      curl \
      $CURL_VERBOSE \
      --connect-timeout 3 \
      --output "$TEMP_DIR/qubes_update_proxy_reachability_file" \
      "$PROXY_SERVER" \
      &

   lastpid="$!"
   wait "$lastpid" || { curl_exit_code="$?" ; true; };

   local curl_status_message
   curl_status_message="$(/usr/libexec/helper-scripts/curl_exit_codes "$curl_exit_code")"

   qubes_update_proxy_test_result_torified="none"

   if [ "$curl_exit_code" = "7" ]; then
      local MSG="<p>Qubes Update Proxy Reachability Result: Failed. (Update proxy not reachable.) \
(curl exit code: $curl_exit_code | curl status message: $curl_status_message)</p>"
      $output_x ${output_opts[@]} --messagex --typex "info" --message "$MSG"
      $output_cli ${output_opts[@]} --messagecli --typecli "info" --message "$MSG"
      return 0
   fi

   if [ ! "$curl_exit_code" = "0" ]; then
      local MSG="<p>Qubes Update Proxy Reachability Result: Failed. (Unknown issue.) \
(curl exit code: $curl_exit_code | curl status message: $curl_status_message)</p>"
      $output_x ${output_opts[@]} --messagex --typex "info" --message "$MSG"
      $output_cli ${output_opts[@]} --messagecli --typecli "info" --message "$MSG"
      return 0
   fi

   local curl_output
   curl_output="$(cat "$TEMP_DIR/qubes_update_proxy_reachability_file")" || true

   if echo "$curl_output" | grep -q "${PROXY_META}" ; then
      qubes_update_proxy_test_result_torified="true"
      local MSG="<p>Qubes Update Proxy Reachability Result: Ok, torified update proxy reachable.</p>"
      $output_x ${output_opts[@]} --messagex --typex "info" --message "$MSG"
      $output_cli ${output_opts[@]} --messagecli --typecli "info" --message "$MSG"
      return 0
   fi

   qubes_update_proxy_test_result_torified="false"
   local MSG="<p>Qubes Update Proxy Reachability Result: Ok, <u>non</u>-torified update proxy reachable.
curl_status_message: <blockquote>$curl_status_message</blockquote>
PROXY_META: <blockquote>${PROXY_META}</blockquote>
curl_output: <blockquote>$curl_output</blockquote></p>"
   $output_x ${output_opts[@]} --messagex --typex "warning" --message "$MSG"
   $output_cli ${output_opts[@]} --messagecli --typecli "warning" --message "$MSG"
}

check_qubes_update_proxy_functionality() {
   if [ ! "$qubes_update_proxy_test_result_torified" = "true" ]; then
      local MSG="<p>Qubes Update Proxy Functionality Result: Skipped.</p>"
      $output_x ${output_opts[@]} --messagex --typex "info" --message "$MSG"
      $output_cli ${output_opts[@]} --messagecli --typecli "info" --message "$MSG"
      return 0
   fi

   local MSG="<p>Qubes Update Proxy Functionality Test: Trying to use Qubes update proxy... PROXY_SERVER: $PROXY_SERVER</p>"
   $output_cli ${output_opts[@]} --messagecli --typecli "info" --message "$MSG"

   local curl_exit_code
   curl_exit_code="0"

   ## UWT_DEV_PASSTHROUGH=1 curl --connect-timeout 3 http://10.137.255.254:8082/
   UWT_DEV_PASSTHROUGH="1" \
      curl \
         --fail \
         --proxy "$PROXY_SERVER" \
         $CURL_VERBOSE \
         --retry-connrefused \
         --retry 3 \
         --retry-delay 3 \
         --retry-max-time 120 \
         --max-time 180 \
         --output "$TEMP_DIR/qubes_update_proxy_functionality_file" \
         https://deb.qubes-os.org \
         &

   lastpid="$!"
   wait "$lastpid" || { curl_exit_code="$?" ; true; };

   local curl_status_message
   curl_status_message="$(/usr/libexec/helper-scripts/curl_exit_codes "$curl_exit_code")"

   if [ "$curl_exit_code" = "22" ]; then
      local MSG="<p>Qubes Update Proxy Functionality Result: Failed. (Filtered.) \
(curl exit code: curl_exit_code | curl status message: $curl_status_message)</p>"
      $output_x ${output_opts[@]} --messagex --typex "info" --message "$MSG"
      $output_cli ${output_opts[@]} --messagecli --typecli "info" --message "$MSG"
      return 0
   fi

   if [ ! "$curl_exit_code" = "0" ]; then
      local MSG="<p>Qubes Update Proxy Functionality Result: Unknown issue. \
(curl exit code: $curl_exit_code | curl status message: $curl_status_message)</p>"
      $output_x ${output_opts[@]} --messagex --typex "info" --message "$MSG"
      $output_cli ${output_opts[@]} --messagecli --typecli "info" --message "$MSG"
      return 0
   fi

   local MSG="<p>Qubes Update Proxy Functionality Result: Ok, functional.</p>"
   $output_x ${output_opts[@]} --messagex --typex "info" --message "$MSG"
   $output_cli ${output_opts[@]} --messagecli --typecli "info" --message "$MSG"
}

check_qubes_update_proxy() {
   if [ ! "$verbose" -ge "1" ]; then
      return 0
   fi

   if [ ! "$qubes_detected" = "true" ]; then
      local MSG="<p>Qubes Update Proxy Test Result: Skipped, because Qubes not detected.</p>"
      $output_x ${output_opts[@]} --messagex --typex "info" --message "$MSG"
      $output_cli ${output_opts[@]} --messagecli --typecli "info" --message "$MSG"
      return 0
   fi

   if [ -f /run/qubes/this-is-netvm ] || [ -f /run/qubes/this-is-proxyvm ]; then
      PROXY_SERVER="${PROXY_SERVER/10.137.255.254/127.0.0.1}"
   fi

   check_qubes_update_proxy_reachability
   check_qubes_update_proxy_functionality
}
