#!/bin/bash

## Copyright (C) 2012 - 2025 ENCRYPTED SUPPORT LLC <adrelanos@whonix.org>
## See the file COPYING for copying conditions.

#set -x

check_services() {
   if [ "$verbose" -lt "1" ]; then
      return 0
   fi

   ## user@host:~$ sudo systemctl --failed --no-legend list-units
   ## apparmor.service        loaded failed failed LSB: AppArmor initialization
   ## whonix-firewall.service loaded failed failed Whonix firewall loader
   ##
   ## user@host:~$ sudo systemctl --failed list-units
   ##   UNIT                    LOAD   ACTIVE SUB    DESCRIPTION
   ## * apparmor.service        loaded failed failed LSB: AppArmor initialization
   ## * whonix-firewall.service loaded failed failed Whonix firewall loader
   ##
   ## LOAD   = Reflects whether the unit definition was properly loaded.
   ## ACTIVE = The high-level unit activation state, i.e. generalization of SUB.
   ## SUB    = The low-level unit activation state, values depend on unit type.
   ##
   ## 2 loaded units listed. Pass --all to see loaded but inactive units, too.
   ## To show all installed unit files use 'systemctl list-unit-files'.

   local line unit load active sub counter failed_lines

   counter="0"

   while read -r -d $'\n' line; do
      read -r unit load active sub _ <<< "$line"
      if [ "apparmor.service" = "$unit" ]; then
         if [ "$verbose" -lt "2" ]; then
            if [ "$qubes_detected" = "true" ]; then
               continue
            fi
         fi
      fi
      if [ "failed" = "$active" ]; then
         counter="$(( counter + 1 ))"
         if [ "$failed_lines" = "" ]; then
            failed_lines="$line"
         else
            failed_lines="$failed_lines
<br></br>$line"
         fi
      fi
   done < <( leaprun read-systemctl-logs-failed-units)

   if [ "$counter" = "0" ]; then
      return 0
   fi

   systemctl_output_with_legend="$(leaprun read-systemctl-logs-failed-units-pretty)"
   systemctl_output_with_legend="$(/usr/libexec/msgcollector/br_add "$systemctl_output_with_legend")"

   local if_you_know_what_you_are_doing_msg
   if_you_know_what_you_are_doing_msg="$(if_you_know_what_you_are_doing_funct "$FUNCNAME")"

   local MSG
   MSG="<p>systemd units check Result: $counter systemd units failed loading. Output of <code>leaprun read-systemctl-logs-failed-units-pretty</code>:
<br></br>
<br></br>########################################
<br></br>$systemctl_output_with_legend
<br></br>########################################
<br></br>
<br></br>To see this for yourself...
<br></br>1. Open a terminal. ($start_menu_instructions_system_first_part Terminal)
<br></br>2. Run. <blockquote><code>sudo systemctl --failed list-units</code></blockquote>

$if_you_know_what_you_are_doing_msg</p>"
   $output_x ${output_opts[@]} --messagex --typex "warning" --message "$MSG"
   $output_cli ${output_opts[@]} --messagecli --typecli "warning" --message "$MSG"

   EXIT_CODE="1"

   return 0
}

br_add_to_file() {
   local file_name="$1"

   test -f "${file_name}"
   rm -f "${file_name}_br"
   touch "${file_name}_br"

   local line
   while IFS= read -r line ; do
      echo "$line<br />" | tee -a "${file_name}_br" >/dev/null
   done < "${file_name}"
}

ignore_pattern_add() {
   if [ "$ignore_patterns" = "" ]; then
      ignore_patterns="$@"
   else
      ignore_patterns+="|"
      ignore_patterns+="$@"
   fi
}

check_journal() {
   if [ "$verbose" -lt "1" ]; then
      return 0
   fi

   test -w "$TEMP_DIR"

   safe-rm -f "$TEMP_DIR/journalctl_output.txt"
   touch "$TEMP_DIR/journalctl_output.txt"

   leaprun read-journalctl-logs | tee --append -- "$TEMP_DIR/journalctl_output.txt" >/dev/null || true

   local pattern_list
   pattern_list="SECCOMP.*syscall=|warn|fail|error|ordering cycle"

   if [ "$qubes_detected" = "true" ]; then
      ignore_pattern_add "virtualbox"
   fi

   ignore_pattern_add "obsolete config item"
   ignore_pattern_add "Tor bootstrap not done"
   ignore_pattern_add "FocusIn: Window .* data not initialized"
   ignore_pattern_add "DEBCONF_NOWARNINGS"
   ignore_pattern_add "Fast TSC calibration failed"
   ignore_pattern_add "swapon failed: Device or resource busy"
   ignore_pattern_add "ACPI: _OSC evaluation for CPUs failed"
   ignore_pattern_add "Failed to retrieve the maximum number of cpus"
   ignore_pattern_add "Could not attach device: Failed to open device '/sys/devices/platform/pcspkr/input/"
   ignore_pattern_add "Failed to connect to bus"
   ignore_pattern_add "Tor Consensus Time"
   ignore_pattern_add "WARNING: Could not determine Tor consensus time middle range."
   ignore_pattern_add "failed_urls: .* allowed_failures"
   ignore_pattern_add "No handler or method for GPE"
   ignore_pattern_add "error while preloading HID BPF dispatcher"
   ignore_pattern_add "AT-SPI: Error retrieving accessibility bus address"
   ignore_pattern_add "WM_HINTS"
   ignore_pattern_add "WM_NORMAL_HINTS"
   ignore_pattern_add "Connection unexpectedly closed"
   ignore_pattern_add "XGetWindowAttributes"
   ignore_pattern_add "WARNING handle_focus: FocusOut: Window"
   ignore_pattern_add "Failed to get window dump for window"
   ignore_pattern_add "kernel:  warn_alloc"
   ignore_pattern_add "RAS: Correctable Errors collector initialized."
   ignore_pattern_add "gcc /usr/src/sdwdate/sclockadj.c -o /usr/libexec/sdwdate/sclockadj"
   ignore_pattern_add "kernel: xen-balloon: vmemmap alloc failure:"
   ignore_pattern_add "Failed to load the 'mdraid' libblockdev plugin"
   ignore_pattern_add "failed to load module mdraid: libbd_mdraid.so.2: cannot open shared object file: No such file or directory"
   ignore_pattern_add "kernel.panic_on_warn"
   ignore_pattern_add "Tor reports: WARN"
   ignore_pattern_add "read-systemctl-logs-failed-units"
   ignore_pattern_add "can't connect to the SCdaemon: IPC connect call failed"
   ignore_pattern_add "Discarding this circuit."

   grep -Ei  "$pattern_list"    -- "$TEMP_DIR/journalctl_output.txt"  | tee -- "$TEMP_DIR/journalctl_matched.txt"  >/dev/null || true

   ## Output by 'apparmor-info' is already de-duplicated.
   leaprun read-apparmor-info   | tee --append -- "$TEMP_DIR/journalctl_matched.txt" >/dev/null || true

   grep -vEi "$ignore_patterns" -- "$TEMP_DIR/journalctl_matched.txt" | tee -- "$TEMP_DIR/journalctl_filtered.txt" >/dev/null || true

   br_add_to_file "$TEMP_DIR/journalctl_filtered.txt"

   local log_output
   log_output="$(cat -- "$TEMP_DIR/journalctl_filtered.txt_br")"

   if [ "$log_output" = "" ]; then
      local MSG
      MSG="<p>systemd journal check Result: OK."
      $output_x ${output_opts[@]} --messagex --typex "info" --message "$MSG"
      $output_cli ${output_opts[@]} --messagecli --typecli "info" --message "$MSG"
   else
      local if_you_know_what_you_are_doing_msg
      if_you_know_what_you_are_doing_msg="$(if_you_know_what_you_are_doing_funct "$FUNCNAME")"

      local MSG
      MSG="<p>systemd journal check Result:
   <br></br>########################################
   <br></br><code>$log_output</code>
   <br></br>########################################
   <br></br>$if_you_know_what_you_are_doing_msg</p>"

      $output_x ${output_opts[@]} --messagex --typex "warning" --message "$MSG"
      $output_cli ${output_opts[@]} --messagecli --typecli "warning" --message "$MSG"

      EXIT_CODE="1"
   fi

   return 0
}

check_whonix_firewall_systemd_status() {
   if [ "$vm_lower_case_short" = "machine" ]; then
      return 0
   fi

   local extra_text systemctl_status_whonix_firewall_exit_code systemctl_status_whonix_firewall_output

   if [ -e /run/anon-firewall/failed.status ]; then
      anon_firewall_failed_file_exists=true
      extra_text="Failure file <code>/run/anon-firewall/failed.status</code> exists!"
   else
      anon_firewall_failed_file_exists=false
      extra_text="Failure file <code>/run/anon-firewall/failed.status</code> does not exist, ok."
   fi

   local i max
   i="0"
   max="30"
   while true ; do
      systemctl_status_whonix_firewall_exit_code="0"
      systemctl_status_whonix_firewall_output="$(leaprun whonix-firewall-status 2>&1)" || { systemctl_status_whonix_firewall_exit_code="$?" ; true; }
      if [ "$systemctl_status_whonix_firewall_exit_code" = "0" ]; then
         break
      else
         local MSG="<p>Whonix firewall systemd unit check Result: Waiting $i of $max.</p>"
         $output_cli ${output_opts[@]} --messagecli --typecli "info" --message "$MSG"
      fi
      i="$(( $i + 1 ))"
      if [ "$i" -ge "$max" ]; then
         break
      fi
      sleep "1" &
      lastpid="$!"
      wait "$lastpid" || true
   done

   systemctl_status_whonix_firewall_output="$(/usr/libexec/msgcollector/br_add "$systemctl_status_whonix_firewall_output")"

   if [ "$systemctl_status_whonix_firewall_exit_code" = "0" ] && [ "$anon_firewall_failed_file_exists" = "false" ]; then
      local MSG="<p>Whonix firewall systemd unit check Result: Ok.</p>"
      if [ "$verbose" -ge "1" ]; then
         $output_x ${output_opts[@]} --messagex --typex "info" --message "$MSG"
         $output_cli ${output_opts[@]} --messagecli --typecli "info" --message "$MSG"
      fi
      return 0
   fi

   journalctl_whonix_firewall_output="$(leaprun read-journalctl-logs-whonix-firewall)" || true
   journalctl_whonix_firewall_output="$(/usr/libexec/msgcollector/br_add "$journalctl_whonix_firewall_output")"

   local if_you_know_what_you_are_doing_msg
   if_you_know_what_you_are_doing_msg="$(if_you_know_what_you_are_doing_funct "$FUNCNAME")"

   local MSG="<p>whonix_firewall failed to load!
<br></br>
<br></br>The whonix_firewall failed to load for some reason. This could be due to the firewall being mis-configured or race-condition. Try restarting the VM to see if this error persists.
<br></br>
<br></br>$extra_text
<br></br>
<br></br>output of <code>systemctl status whonix-firewall</code>:
<br></br>
<br></br>########################################
<br></br>$systemctl_status_whonix_firewall_output
<br></br>########################################
<br></br>
<br></br>output of <code>journalctl --boot -u whonix-firewall</code>:
<br></br>
<br></br>########################################
<br></br>$journalctl_whonix_firewall_output
<br></br>########################################
<br></br>
<br></br>To see this for yourself...
<br></br>1. Open a terminal. ($start_menu_instructions_system_first_part Terminal)
<br></br>2. Run. <blockquote><code>sudo systemctl status whonix-firewall</code></blockquote>
<br></br>2. Also see. <blockquote><code>sudo journalctl --boot -u whonix-firewall | cat</code></blockquote>
<br></br>3. Try to manually start Whonix firewall. <blockquote><code>sudo whonix_firewall</code></blockquote>

$if_you_know_what_you_are_doing_msg
</p>"

   $output_x ${output_opts[@]} --messagex --typex "error" --message "$MSG"
   $output_cli ${output_opts[@]} --messagecli --typecli "error" --message "$MSG"

   EXIT_CODE="1"
   cleanup "1"
   return 0
}
